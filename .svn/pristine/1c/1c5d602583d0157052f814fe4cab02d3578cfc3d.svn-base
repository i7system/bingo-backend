
package br.com.bingo.controllers;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import br.com.bingo.models.BingoClientes;
import br.com.bingo.models.BingoUnidades;
import br.com.bingo.models.SecPerfis;
import br.com.bingo.models.SecUsuarios;
import br.com.bingo.repository.bingo_unidadesRepository;
import br.com.bingo.UsuariosLogados;

@RestController
@RequestMapping(value="/bingo")
@Api("bingo_unidadesController")
@CrossOrigin(origins="*")

public class bingo_unidadesController {

	@Autowired
	bingo_unidadesRepository bingo_unidadesRepository;
	
	
	
	@GetMapping("/ListarUnidades")
	@ApiOperation(value="buscar unidades")
	public List<HashMap<String, Object>> ListarUnidades(){
			
		List<Object[]> unidade = null;
		List listaunidades = new ArrayList();
		
		
		try {
			unidade = bingo_unidadesRepository.ListarTodasUnidades();
			System.out.println("Tamanho unidades : "+unidade.size());
			
	
			for(Object[] obj: unidade ) {
			
				/*SELECT A.IDUNIDADE,A.IDUSUARIO,B.NOMEUSUARIO,A.NOMEESTABELECIMENTO,A.IDCLIENTE, C.NOMECLIENTE, A.RUA,A.NUMERO
				 * ,A.COMPLEMENTO,A.BAIRRO,A.IDUF,D.SIGLA,
				 */
			/*	A.IDCIDADE,E.NOME AS NOMECIDADE,A.STATUS*/
				
				
				HashMap<String,Object> objeto = new HashMap<>();

				int idunidade = (int)obj[0];				
				int idusuario= (int)obj[1];
				String nomeusuario = (String)obj[2];	
				String nomeestabelecimento= (String)obj[3];
				int idcliente= (int)obj[4];
				String nomecliente= (String)obj[5];
				String rua= (String)obj[6];
				String numero= (String)obj[7];
				String complemento= (String)obj[8];
				String bairro= (String)obj[9];
				int iduf= (int)obj[10];
				String sigla= (String)obj[11];
				int idcidade= (int)obj[12];
				String nomecidade= (String)obj[13];
				int ddd= (int)obj[14];
				String telefone= (String)obj[15];
				int status= (int)obj[16];
				
				objeto.put("IDUNIDADE",idunidade);
				objeto.put("IDUSUARIO",idusuario);
				objeto.put("NOMEUSUARIO",nomeusuario);
				objeto.put("NOMEESTABELECIMENTO",nomeestabelecimento);
				objeto.put("IDCLIENTE",idcliente);
				objeto.put("NOMECLIENTE",nomecliente);
				objeto.put("RUA",rua);
				objeto.put("NUMERO",numero);
				objeto.put("COMPLEMENTO",complemento);
				objeto.put("BAIRRO",bairro);
				objeto.put("IDUF",iduf);
				objeto.put("SIGLA",sigla);
				objeto.put("IDCIDADE",idcidade);
				objeto.put("NOMECIDADE",nomecidade);
				objeto.put("DDD",ddd);
				objeto.put("TELEFONE",telefone);
				objeto.put("STATUS",status);
				
				listaunidades.add(objeto);
				
		
				
			}
			
			
			
			
			
			
		}catch(Exception e) {
			System.out.println("Erro : " + e);
		}
		
		return listaunidades;	
	}

	@GetMapping("/BuscarUnidade")
	@ApiOperation(value="buscar unidades")
	public HashMap<String, Object> BuscarUnidade(@RequestBody HashMap<String,Object> JsonIdunidade){
			
		List<Object[]> unidade = null;
		HashMap<String,Object> objeto = new HashMap<>();
		int IDUNIDADE = (int)JsonIdunidade.get("IDUNIDADE");
		
		try {
			unidade = bingo_unidadesRepository.BuscarUnidade(IDUNIDADE);
			
			for(Object[] obj: unidade ) {
			
				/*SELECT A.IDUNIDADE,A.IDUSUARIO,B.NOMEUSUARIO,A.NOMEESTABELECIMENTO,A.IDCLIENTE, C.NOMECLIENTE, A.RUA,A.NUMERO
				 * ,A.COMPLEMENTO,A.BAIRRO,A.IDUF,D.SIGLA,
				 */
			/*	A.IDCIDADE,E.NOME AS NOMECIDADE,A.STATUS*/
				
				
				

				int idunidade = (int)obj[0];				
				int idusuario= (int)obj[1];
				String nomeusuario = (String)obj[2];	
				String nomeestabelecimento= (String)obj[3];
				int idcliente= (int)obj[4];
				String nomecliente= (String)obj[5];
				String rua= (String)obj[6];
				String numero= (String)obj[7];
				String complemento= (String)obj[8];
				String bairro= (String)obj[9];
				int iduf= (int)obj[10];
				String sigla= (String)obj[11];
				int idcidade= (int)obj[12];
				String nomecidade= (String)obj[13];
				int ddd= (int)obj[14];
				String telefone= (String)obj[15];
				int status= (int)obj[16];
				
				objeto.put("IDUNIDADE",idunidade);
				objeto.put("IDUSUARIO",idusuario);
				objeto.put("NOMEUSUARIO",nomeusuario);
				objeto.put("NOMEESTABELECIMENTO",nomeestabelecimento);
				objeto.put("IDCLIENTE",idcliente);
				objeto.put("NOMECLIENTE",nomecliente);
				objeto.put("RUA",rua);
				objeto.put("NUMERO",numero);
				objeto.put("COMPLEMENTO",complemento);
				objeto.put("BAIRRO",bairro);
				objeto.put("IDUF",iduf);
				objeto.put("SIGLA",sigla);
				objeto.put("IDCIDADE",idcidade);
				objeto.put("NOMECIDADE",nomecidade);
				objeto.put("DDD",ddd);
				objeto.put("TELEFONE",telefone);
				objeto.put("STATUS",status);
				
				
				
		
				
			}
			
			
			
			
			
			
		}catch(Exception e) {
			System.out.println("Erro : " + e);
		}
		
		return objeto;	
	}
	
	@DeleteMapping("/DeletarUnidade")
	@ApiOperation(value="Exclui uma unidade")
	public HashMap<String,String> DeletarUnidade(@RequestBody HashMap<String,Object>JsonIdunidade) {	
		HashMap<String,String> retorno = new  HashMap<String,String>();
		try {
			
			int IDUNIDADE = (int)JsonIdunidade.get("idunidade");
			bingo_unidadesRepository.deleteById(IDUNIDADE);
			retorno.put("mensagem", "OK");
			
		}catch(Exception erro){
				System.out.println("Erro: "+erro.getMessage());
		}
		return retorno;
	}

	
	@GetMapping("/BingoUnidades")
	@ApiOperation(value="lista todos os BingoUnidades em ordem crescente")
	public List<BingoUnidades> listarbingo_unidades(){
			
		List listaunidades = null;
		try {
			listaunidades =(List<BingoUnidades>) bingo_unidadesRepository.findAll();		
		}catch(Exception e) {
			System.out.println("Erro : " + e);
		}
		
		return listaunidades;	
	}
	
	@PostMapping("/SalvarUnidade")
	@ApiOperation(value="salvar unidade")
	public HashMap<String, Object> SalvarUnidade(@RequestBody BingoUnidades BingoUnidades, @RequestHeader HttpHeaders header) {	
		
		HashMap<String, Object> retorno = new HashMap<String,Object>();
		//Varivável de retorno 
		
		String validacao = "S";
		//Variável que valida os campos
		
		try {
			
			//A validação de todos os campos será feita nesse bloco...
			
			if(BingoUnidades.getIDUSUARIO() == 0) {
				
				validacao = "N";			
			}
			
			if(BingoUnidades.getNOMEESTABELECIMENTO().length() == 0) {
				
				validacao = "N";			
			}
			
			if(BingoUnidades.getIDCLIENTE() == 0) {
				
				validacao = "N";			
			}
			
			if(BingoUnidades.getCEP().length() == 0) {
				
				validacao = "N";			
			}
			
			if(BingoUnidades.getIDUF() == 0) {
				
				validacao = "N";			
			}
			
			if(BingoUnidades.getIDCIDADE() == 0) {
				
				validacao = "N";			
			}
			
			if(BingoUnidades.getBAIRRO().length() == 0) {
				
				validacao = "N";			
			}
			
			if(BingoUnidades.getRUA().length() == 0) {
				
				validacao = "N";			
			}
			
			if(BingoUnidades.getNUMERO().length() == 0) {
				
				validacao = "N";			
			}
			
			if(BingoUnidades.getCOMPLEMENTO().length() == 0) {
				
				validacao = "N";			
			}
			
			if(BingoUnidades.getDDD() == 0) {
				
				validacao = "N";			
			}
			
			if(BingoUnidades.getTELEFONE().length() == 0) {
				
				validacao = "N";			
			}
			
	
			
			
			if(BingoUnidades.getIDUNIDADE() == 0) {
				//Se não houver o id da unidade,
				
				BingoUnidades unidade = new BingoUnidades();
				//Crie uma nova unidade,
				
				if(validacao == "S") {
					//Se todos os campos estiverem preenchidos,
					//Começe a incluir-los no banco de dados
					
					unidade.setBAIRRO(BingoUnidades.getBAIRRO());
					unidade.setCEP(BingoUnidades.getCEP());
					unidade.setCOMPLEMENTO(BingoUnidades.getCOMPLEMENTO());
					unidade.setDDD(BingoUnidades.getDDD());
					unidade.setIDCIDADE(BingoUnidades.getIDCIDADE());
					unidade.setIDCLIENTE(BingoUnidades.getIDCLIENTE());
					unidade.setIDUF(BingoUnidades.getIDUF());
					unidade.setIDUSUARIO(BingoUnidades.getIDUSUARIO());
					unidade.setNOMEESTABELECIMENTO(BingoUnidades.getNOMEESTABELECIMENTO());
					unidade.setNUMERO(BingoUnidades.getNUMERO());
					unidade.setRUA(BingoUnidades.getRUA());
					unidade.setSTATUS(1);
					unidade.setTELEFONE(BingoUnidades.getTELEFONE());
					bingo_unidadesRepository.save(unidade);
					
				//retorno
				retorno.put("validacao", "S");
				retorno.put("mensagem", "nova unidade criada com sucesso !");
				}

				
			}else {
				//Se houver id da unidade...
				BingoUnidades unidade = bingo_unidadesRepository.findByIDUNIDADE(BingoUnidades.getIDUNIDADE());
				//Pegue uma unidade passando o id da unidade
				
				if(validacao == "S") {
					//se validação for igual a verdadeiro,
					//atualize os dados da unidade
					unidade.setBAIRRO(BingoUnidades.getBAIRRO());
					unidade.setCEP(BingoUnidades.getCEP());
					unidade.setCOMPLEMENTO(BingoUnidades.getCOMPLEMENTO());
					unidade.setDDD(BingoUnidades.getDDD());
					unidade.setIDCIDADE(BingoUnidades.getIDCIDADE());
					unidade.setIDCLIENTE(BingoUnidades.getIDCLIENTE());
					unidade.setIDUF(BingoUnidades.getIDUF());
					unidade.setIDUSUARIO(BingoUnidades.getIDUSUARIO());
					unidade.setNOMEESTABELECIMENTO(BingoUnidades.getNOMEESTABELECIMENTO());
					unidade.setNUMERO(BingoUnidades.getNUMERO());
					unidade.setRUA(BingoUnidades.getRUA());
					unidade.setSTATUS(1);
					unidade.setTELEFONE(BingoUnidades.getTELEFONE());
					
					bingo_unidadesRepository.save(unidade);
					
					retorno.put("validacao", "S");
					retorno.put("idunidade", unidade.getIDUNIDADE());
					retorno.put("mensagem", "sua unidade foi atualizada com sucesso !");
					}

			}

		}catch(Exception e) {
				System.out.println("Erro : "+e.getMessage());
		}
		
		
			
		
		return retorno;
	}


	

}
